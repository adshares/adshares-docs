Impressions
===========

.. _protocol-impressions:

User navigates to a website or parcel
-------------------------------------

The following process takes place when :ref:`User <protocol-definitions-user>` initially navigates to a :ref:`Site <protocol-definitions-site>`:

.. container:: protocol

    * :ref:`SSA <protocol-definitions-ssa>` notifies :ref:`SSP <protocol-definitions-ssp>` about :ref:`Register Event <protocol-definitions-registerevent>`.
    * :ref:`SSP <protocol-definitions-ssp>` redirects the event notification call to its :ref:`Context Platform <protocol-definitions-cp>`.
    * In response to the event notification call, :ref:`Context Platform <protocol-definitions-cp>` returns its :ref:`Context Script <protocol-definitions-contextscript>`, and :ref:`SSA <protocol-definitions-ssa>` makes an attempt to execute this script within its sandbox.

User browses through a website or parcel
----------------------------------------

The following process takes place when :ref:`User <protocol-definitions-user>` browses through a :ref:`Site <protocol-definitions-site>`:

.. container:: protocol

    * :ref:`SSA <protocol-definitions-ssa>` calls :ref:`SSP <protocol-definitions-ssp>` to get a list of :ref:`Creatives <protocol-definitions-creative>` to be displayed in all available :ref:`Placements <protocol-definitions-placement>`.
    * Prior to generating the requested list, :ref:`SSP <protocol-definitions-ssp>` might need to call :ref:`Context Infrastructure <protocol-definitions-contextinfrastructure>` to retrieve :ref:`Context Data <protocol-definitions-contextdata>`.
    * :ref:`SSP <protocol-definitions-ssp>` replies to :ref:`SSA <protocol-definitions-ssa>` with a list of metadata for :ref:`Creatives <protocol-definitions-creative>`. 

.. note::
    The list of :ref:`Creatives <protocol-definitions-creative>` is generated by :ref:`SSP <protocol-definitions-ssp>` using information already cached there, without engaging any of the :ref:`DSPs <protocol-definitions-dsp>`. This is possible due to the fact that :ref:`SSP <protocol-definitions-ssp>` has already retrieved all the relevant :ref:`Demand-Side Inventories <protocol-definitions-demandinventory>` during the synchronization stage.

The metadata for each :ref:`Creative <protocol-definitions-creative>` contains a :ref:`DSP <protocol-definitions-dsp>` endpoint 
for retrieving :ref:`Creative Content <protocol-definitions-creativecontent>`.
This implies that each :ref:`Creative <protocol-definitions-creative>` in the list can be associated with its own :ref:`DSP <protocol-definitions-dsp>`. 
As a result, :ref:`Creatives <protocol-definitions-creative>` managed by various :ref:`DSPs <protocol-definitions-dsp>` 
can be displayed next to each other within the same :ref:`Site <protocol-definitions-site>`.

.. note::
    The above process can be repeated periodically in a loop that ensures that :ref:`Creatives <protocol-definitions-creative>` are swapped periodically within the same :ref:`Placement <protocol-definitions-placement>`. 
    Such a loop aims to maximize utilization of :ref:`Placements <protocol-definitions-placement>` by displaying multiple :ref:`Creatives <protocol-definitions-creative>` sequentially within a single :ref:`Placements <protocol-definitions-placement>`.

At this stage, metadata for all :ref:`Creatives <protocol-definitions-creative>` is already retrieved, but none of them is rendered, 
as :ref:`SSA <protocol-definitions-ssa>` has not fetched :ref:`Creative Content <protocol-definitions-creativecontent>` yet. 
The following sequence of events occurres for each :ref:`Creative <protocol-definitions-creative>` to fetch the corresponding :ref:`Creative Content <protocol-definitions-creativecontent>` 
and display it in the designated :ref:`Placement <protocol-definitions-placement>`:

.. container:: protocol

    * Using the endpoint contained in the metadata, :ref:`SSA <protocol-definitions-ssa>` calls :ref:`DSP <protocol-definitions-dsp>` to retrieve :ref:`Creative Content <protocol-definitions-creativecontent>`.
    * :ref:`SSA <protocol-definitions-ssa>` receives the requested :ref:`Creative Content <protocol-definitions-creativecontent>`.
    
Before a :ref:`Creative <protocol-definitions-creative>` is actually rendered, :ref:`SSA <protocol-definitions-ssa>` 
compares the hash of the received :ref:`Creative Content <protocol-definitions-creativecontent>` with the hash contained in the metadata - 
to ensure that the :ref:`Creative Content <protocol-definitions-creativecontent>` matches what was initially approved when the entire :ref:`Campaign <protocol-definitions-campaign>` was launched.
Assuming the above hashes match, :ref:`SSA <protocol-definitions-ssa>` renders the :ref:`Creative <protocol-definitions-creative>` on the screen, so that the :ref:`User <protocol-definitions-user>` can see it.

The following sequence of events occurres for each :ref:`Creative <protocol-definitions-creative>` to ensure that 
both :ref:`Supply-Side Infrastructure <protocol-definitions-ssi>` and :ref:`Demand-Side Infrastructure <protocol-definitions-dsi>` are kept in synch:

.. container:: protocol

    * :ref:`SSA <protocol-definitions-ssa>` notifies :ref:`SSP <protocol-definitions-ssp>` about :ref:`View Event <protocol-definitions-viewevent>`.
    * :ref:`SSP <protocol-definitions-ssp>` redirects the event notification call to :ref:`DSP <protocol-definitions-dsp>`.
    * In response to the event notification call, :ref:`DSP <protocol-definitions-dsp>` returns an endpoint to its :ref:`Context Platform <protocol-definitions-cp>`.
    * Using the above endpoint, :ref:`SSA <protocol-definitions-ssa>` notifies :ref:`Context Platform <protocol-definitions-cp>` about :ref:`Register Event <protocol-definitions-registerevent>`.
    * In response to the event notification call, :ref:`Context Platform <protocol-definitions-cp>` returns its :ref:`Context Script <protocol-definitions-contextscript>`, and :ref:`SSA <protocol-definitions-ssa>` makes an attempt to execute this script within its sandbox.
    
User clicks on an ad
--------------------

The following process takes place when :ref:`User <protocol-definitions-user>` clicks on any instance of the displayed :ref:`Creatives <protocol-definitions-creative>`, assuming it is clickable:

.. container:: protocol

    * :ref:`SSA <protocol-definitions-ssa>` notifies :ref:`SSP <protocol-definitions-ssp>` about :ref:`Click Event <protocol-definitions-clickevent>`.
    * :ref:`SSA <protocol-definitions-ssa>` redirects the event notification call to :ref:`DSP <protocol-definitions-dsp>`.
    * Using its internal mapping, :ref:`DSP <protocol-definitions-dsp>` redirects the :ref:`Click Event <protocol-definitions-clickevent>` to the :ref:`Target <protocol-definitions-target>`, so that in effect :ref:`User <protocol-definitions-user>` navigates from the :ref:`Site <protocol-definitions-site>` to the :ref:`Target <protocol-definitions-target>`.
    * Optionally, :ref:`DSA <protocol-definitions-dsa>` responds to :ref:`DSP <protocol-definitions-dsp>` to notify it about :ref:`Conversion Event <protocol-definitions-conversionevent>`.
