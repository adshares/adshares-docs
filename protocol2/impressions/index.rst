Impressions
===========

.. _protocol-impressions:

User navigates to a website or parcel
-------------------------------------

The following process takes place when a :ref:`User <protocol-definitions-user>` initially navigates to a :ref:`Site <protocol-definitions-site>`:

.. container:: protocol

    * :ref:`SSA <protocol-definitions-ssa>` notifies :ref:`SSP <protocol-definitions-ssp>` about a new :ref:`Register Event <protocol-definitions-registerevent>`.
    * In response to the event notification call, :ref:`SSP <protocol-definitions-ssp>` returns its choice of endpoints for instances of :ref:`Context Infrastructure <protocol-definitions-contextinfrastructure>`.
    * Using the above endpoints, :ref:`SSA <protocol-definitions-ssa>` notifies :ref:`Context Infrastructure <protocol-definitions-contextinfrastructure>` about the :ref:`Register Event <protocol-definitions-registerevent>`.
    * In response to the event notification call, each instance of the :ref:`Context Infrastructure <protocol-definitions-contextinfrastructure>` returns its own :ref:`Context Script <protocol-definitions-contextscript>`, and :ref:`SSA <protocol-definitions-ssa>` makes an attempt to execute those scripts within its sandbox.

User browses through a website or parcel
----------------------------------------

The following process takes place when a :ref:`User <protocol-definitions-user>` browses through a :ref:`Site <protocol-definitions-site>`:

.. container:: protocol

    * :ref:`SSA <protocol-definitions-ssa>` calls :ref:`SSP <protocol-definitions-ssp>` to get a list of :ref:`Creatives <protocol-definitions-creative>` to be displayed in all available :ref:`Placements <protocol-definitions-placement>`.
    * Prior to generating the requested list, :ref:`SSP <protocol-definitions-ssp>` calls :ref:`Context Infrastructure <protocol-definitions-contextinfrastructure>` to retrieve :ref:`Context Data <protocol-definitions-contextdata>`. Then :ref:`SSP <protocol-definitions-ssp>` replies to :ref:`SSA <protocol-definitions-ssa>` with a list of metadata for :ref:`Creatives <protocol-definitions-creative>`. 

.. note::
    The list of :ref:`Creatives <protocol-definitions-creative>` is generated by :ref:`SSP <protocol-definitions-ssp>` using information already cached there, without engaging any the :ref:`DSPs <protocol-definitions-dsp>`. This is possible due to the fact that :ref:`SSP <protocol-definitions-ssp>` has already retrieved all the relevant :ref:`Demand-Side Inventories <protocol-definitions-demandinventory>` during the synchronization stage.

Among other things, the metadata for each :ref:`Creative <protocol-definitions-creative>` contains three :ref:`DSP <protocol-definitions-dsp>` endpoints:

.. container:: protocol

    * An endpoint for retrieving :ref:`Creative Content <protocol-definitions-creativecontent>`
    * An endpoint for notifying that a :ref:`View Event <protocol-definitions-viewevent>` has occurred
    * An endpoint for notifying that a :ref:`Click Event <protocol-definitions-clickevent>` has occurred

This implies that each :ref:`Creative <protocol-definitions-creative>` in the list can be associated with its own :ref:`DSP <protocol-definitions-dsp>`. As a result, :ref:`Creatives <protocol-definitions-creative>` managed by various :ref:`DSPs <protocol-definitions-dsp>` can be displayed next to each other within the same :ref:`Site <protocol-definitions-site>`.

.. note::
    The above process can be repeated periodically in a loop that ensures that :ref:`Creatives <protocol-definitions-creative>` are swapped periodically within the same :ref:`Placement <protocol-definitions-placement>`. 
    Such a loop aims to maximize utilization of :ref:`Placements <protocol-definitions-placement>` by displaying multiple :ref:`Creatives <protocol-definitions-creative>` sequentially to the same :ref:`User <protocol-definitions-user>`.

At this stage, the metadata for all :ref:`Creatives <protocol-definitions-creative>` is already retrieved, but none of them is rendered yet, as :ref:`SSA <protocol-definitions-ssa>` does not have the :ref:`Creative Content <protocol-definitions-creativecontent>`. 

The following sequence of events occurres for each :ref:`Creative <protocol-definitions-creative>` to ensure that it is displayed in the designated :ref:`Placement <protocol-definitions-placement>`, 
and both :ref:`SSP <protocol-definitions-ssp>` and :ref:`DSP <protocol-definitions-dsp>` are notified simultaneously about this fact, so that their states remain synchronized:

.. container:: protocol

    * Using the endpoint contained in the metadata, :ref:`SSA <protocol-definitions-ssa>` calls :ref:`DSP <protocol-definitions-dsp>` to retrieve :ref:`Creative Content <protocol-definitions-creativecontent>`.
    * :ref:`SSA <protocol-definitions-ssa>` receives the requested :ref:`Creative Content <protocol-definitions-creativecontent>`, but before a :ref:`Creative <protocol-definitions-creative>` is actually rendered, :ref:`SSA <protocol-definitions-ssa>` compares the hash of the received :ref:`Creative Content <protocol-definitions-creativecontent>` with the hash contained in the metadata - to ensure that the :ref:`Creative Content <protocol-definitions-creativecontent>` matches what was initially approved when the :ref:`Campaign <protocol-definitions-campaign>` was launched.
    * Assuming the above hashes match, :ref:`SSA <protocol-definitions-ssa>` renders the :ref:`Creative <protocol-definitions-creative>` on the screen, so that the :ref:`User <protocol-definitions-user>` can see it.
    * :ref:`SSA <protocol-definitions-ssa>` notifies :ref:`SSP <protocol-definitions-ssp>` about a :ref:`View Event <protocol-definitions-viewevent>`.
    * Using the endpoint contained in the metadata, :ref:`SSA <protocol-definitions-ssa>` calls :ref:`DSP <protocol-definitions-dsp>` to notify it that a :ref:`View Event <protocol-definitions-viewevent>` has occurred.
    * In response to the event notification call, :ref:`DSP <protocol-definitions-dsp>` returns its choice of endpoints for instances of :ref:`Context Infrastructure <protocol-definitions-contextinfrastructure>`.
    * Using the above endpoints, :ref:`SSA <protocol-definitions-ssa>` notifies :ref:`Context Infrastructure <protocol-definitions-contextinfrastructure>` about a :ref:`Register Event <protocol-definitions-registerevent>`.
    * In response to the event notification call, each instance of the :ref:`Context Infrastructure <protocol-definitions-contextinfrastructure>` returns its own :ref:`Context Scripts <protocol-definitions-contextscript>`, and :ref:`SSA <protocol-definitions-ssa>` makes an attempt to execute those scripts within its sandbox.

User clicks on an ad
--------------------

The following process takes place when a :ref:`User <protocol-definitions-user>` clicks on any of the displayed :ref:`Creatives <protocol-definitions-creative>`, assuming they are clickable:

.. container:: protocol

    * :ref:`SSA <protocol-definitions-ssa>` notifies :ref:`SSP <protocol-definitions-ssp>` about a :ref:`Click Event <protocol-definitions-clickevent>`.
    * Using the endpoint contained in the metadata, :ref:`SSA <protocol-definitions-ssa>` calls :ref:`DSP <protocol-definitions-dsp>` to notify it that a :ref:`Click Event <protocol-definitions-clickevent>` has occurred.
    * Using its internal mapping, :ref:`DSP <protocol-definitions-dsp>` redirects the :ref:`Click Event <protocol-definitions-clickevent>` to the :ref:`Target <protocol-definitions-target>`, so that in effect :ref:`User <protocol-definitions-user>` navigates from the :ref:`Site <protocol-definitions-site>` to the :ref:`Target <protocol-definitions-target>`. Optionally, :ref:`DSA <protocol-definitions-dsa>` responds to :ref:`DSP <protocol-definitions-dsp>` to report that a :ref:`Conversion Event <protocol-definitions-conversionevent>` has occurred.
