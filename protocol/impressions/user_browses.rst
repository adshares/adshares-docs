User Browses Through a Site
===========================

The following diagram presents an overview of all interactions taking place when a :ref:`User <protocol-definitions-user>`
browses through a :ref:`Site <protocol-definitions-site>`:

.. uml::
    :align: center

    skinparam monochrome true

    participant "Supply-Side\nAgent"                as SSA
    participant "Supply-Side\nContext Provider"     as SSCP
    participant "Supply-Side\nPlatform"             as SSP
    participant "Demand-Side\nPlatform"             as DSP
    participant "Demand-Side\nContext Provider"     as DSCP

    ==Fetching Creatives==
    SSA -> SSP: Find Creatives
    SSP -> SSCP: Get\nUser/Site/Device\nContext
    SSCP --> SSP: User/Site/Device\nContext
    SSP --> SSA: Creatives

    ==Fetching Content for Each Creative==
    loop for each Creative
        SSA ->      DSP     : Get Creative Content
        DSP -->     SSA     : Creative Content
    end

    ==Synchronizing View Events for Each Creative==
    loop for each Creative
        SSA ->      DSP     : Post View Event
        DSP -->     SSA     : Context Scripts
        SSA ->      SSA     : Execute\nContext Scripts
    end

    ==Synchronizing Register Events for Each Creative==
    loop for each Creative
        SSA ->      DSCP    : Post Register Event
        DSCP -->    SSA     : Context Scripts
        SSA ->      SSA     : Execute\nContext Scripts
        SSA ->      DSCP    : Result of\nContext Scripts\n//optional//
    end

Fetching Creatives
------------------

The following diagram presents the details of the workflow aimed at fetching a list of :ref:`Creatives <protocol-definitions-creative>` to be displayed
when a :ref:`User <protocol-definitions-user>` browses through a :ref:`Site <protocol-definitions-site>`:

.. uml::
    :align: center

    skinparam monochrome true

    participant "Supply-Side\nAgent"                as SSA
    participant "Supply-Side\nContext Provider"     as SSCP
    participant "Supply-Side\nPlatform"             as SSP
    participant "Ad Select\nModule"                 as ASM

    SSA -> SSP: Find Creatives
    SSP -> SSCP: Get\nUser/Site/Device\nContext
    SSCP --> SSP: User/Site/Device\nContext
    SSP -> ASM: Get Creatives
    ASM --> SSP: Creatives
    SSP --> SSA: Creatives

The following process takes place when a :ref:`User <protocol-definitions-user>` browses through a :ref:`Site <protocol-definitions-site>`:

* :ref:`Supply-Side Agent <protocol-definitions-ssa>` calls :ref:`Supply-Side Platform <protocol-definitions-ssp>` to get a list 
  of :ref:`Creatives <protocol-definitions-creative>` to be displayed in all available :ref:`Placements <protocol-definitions-placement>`.
* :ref:`Supply-Side Platform <protocol-definitions-ssp>` replies to :ref:`Supply-Side Agent <protocol-definitions-ssa>` with a list 
  of :ref:`Creative Object <protocol-definitions-creativeobject>`.

In order to generate the requested list, :ref:`Supply-Side Platform <protocol-definitions-ssp>` first needs to make the following calls:

* :ref:`Supply-Side Platform <protocol-definitions-ssp>` calls :ref:`Context Provider <protocol-definitions-cp>` 
  to retrieve :ref:`Context Data <protocol-definitions-contextdata>` regarding the current :ref:`User <protocol-definitions-user>`, 
  :ref:`Site <protocol-definitions-site>` and :ref:`Device <protocol-definitions-device>`.
* In case :ref:`Supply-Side Platform <protocol-definitions-ssp>` uses the services of an external :ref:`Ad Select Module <protocol-definitions-asm>`,
  :ref:`Supply-Side Platform <protocol-definitions-ssp>` calls :ref:`Ad Select Module <protocol-definitions-asm>` to retrieve a list
  of :ref:`Creatives <protocol-definitions-creative>`.

.. note::
    The list of :ref:`Creatives <protocol-definitions-creative>` is generated by :ref:`Supply-Side Platform <protocol-definitions-ssp>` using information 
    already stored there, without the need to query the corresponding :ref:`Demand-Side Platform <protocol-definitions-dsp>`. 
    This is possible due to the fact that :ref:`Supply-Side Platform <protocol-definitions-ssp>` has already retrieved all the relevant 
    :ref:`Demand-Side Inventories <protocol-definitions-demandinventory>` during the :doc:`Synchronization <../synchronization/index>` stage.

:ref:`Creative Object <protocol-definitions-creativeobject>` contains a :ref:`Demand-Side Platform <protocol-definitions-dsp>` endpoint 
for retrieving :ref:`Creative Content <protocol-definitions-creativecontent>`.
This implies that each :ref:`Creative <protocol-definitions-creative>` in the list can be associated with its own :ref:`Demand-Side Platform <protocol-definitions-dsp>`. 
As a result, :ref:`Creatives <protocol-definitions-creative>` managed by various :ref:`Demand-Side Platforms <protocol-definitions-dsp>` 
can be displayed next to each other within the same :ref:`Site <protocol-definitions-site>`.

.. note::
    The above process can be repeated periodically in a loop that ensures that :ref:`Creatives <protocol-definitions-creative>` are swapped periodically 
    within the same :ref:`Placement <protocol-definitions-placement>`. Such a loop aims to maximize utilization of :ref:`Placements <protocol-definitions-placement>` 
    by displaying multiple :ref:`Creatives <protocol-definitions-creative>` sequentially to the same :ref:`User <protocol-definitions-user>` 
    within a single :ref:`Placement <protocol-definitions-placement>`.

Fetching Content for Each Creative
----------------------------------

At this stage, :ref:`Creative Object <protocol-definitions-creativeobject>` is already retrieved, but none of the :ref:`Creatives <protocol-definitions-creative>` 
is actually rendered, as :ref:`Supply-Side Agent <protocol-definitions-ssa>` has not fetched :ref:`Creative Content <protocol-definitions-creativecontent>` yet.

The following diagram presents the details of the workflow aimed at fetching :ref:`Creative Content <protocol-definitions-creativecontent>` 
for each :ref:`Creative <protocol-definitions-creative>`:

.. uml::
    :align: center

    skinparam monochrome true

    participant "Supply-Side\nAgent"                as SSA
    participant "Demand-Side\nPlatform"             as DSP

    loop for each Creative
        SSA ->      DSP     : Get Creative Content
        DSP -->     SSA     : Creative Content
    end

The following sequence of events occurs for each :ref:`Creative <protocol-definitions-creative>` to fetch the corresponding 
:ref:`Creative Content <protocol-definitions-creativecontent>` and display it in its designated :ref:`Placement <protocol-definitions-placement>`:

* Using the endpoint contained in :ref:`Creative Object <protocol-definitions-creativeobject>`, :ref:`Supply-Side Agent <protocol-definitions-ssa>` 
  calls :ref:`Demand-Side Platform <protocol-definitions-dsp>` to retrieve :ref:`Creative Content <protocol-definitions-creativecontent>`.
* :ref:`Supply-Side Agent <protocol-definitions-ssa>` receives the requested :ref:`Creative Content <protocol-definitions-creativecontent>`.
    
Before a :ref:`Creative <protocol-definitions-creative>` is actually rendered, :ref:`Supply-Side Agent <protocol-definitions-ssa>` 
compares the hash (checksum) of the received :ref:`Creative Content <protocol-definitions-creativecontent>` with the hash (checksum) contained in
:ref:`Creative Object <protocol-definitions-creativeobject>`. This is done to ensure that the :ref:`Creative Content <protocol-definitions-creativecontent>` 
matches what was initially approved in the :ref:`Campaign <protocol-definitions-campaign>` definition.

Assuming the above hashes (checksums) match, :ref:`Supply-Side Agent <protocol-definitions-ssa>` renders the :ref:`Creative <protocol-definitions-creative>` on the screen, 
so that the :ref:`User <protocol-definitions-user>` can see it.

Synchronizing View Events for Each Creative
-------------------------------------------

The following diagram presents the details of the workflow aimed at synchronizing :ref:`View Events <protocol-definitions-viewevent>` 
for each :ref:`Creative <protocol-definitions-creative>`:

.. uml::
    :align: center

    skinparam monochrome true

    participant "Supply-Side\nAgent"                as SSA
    participant "Demand-Side\nPlatform"             as DSP

    loop for each Creative
        SSA ->      DSP     : Post View Event
        DSP -->     SSA     : Context Scripts
        SSA ->      SSA     : Execute\nContext Scripts
    end

The following sequence of events occurs for each :ref:`Creative <protocol-definitions-creative>` to ensure that 
both :ref:`Supply-Side Platform <protocol-definitions-ssp>` and :ref:`Demand-Side Platform <protocol-definitions-dsp>` are kept 
in synch regarding :ref:`View Events <protocol-definitions-viewevent>`:

* Using the endpoint contained in :ref:`Creative Object <protocol-definitions-creativeobject>`, 
  :ref:`Supply-Side Agent <protocol-definitions-ssa>` notifies :ref:`Demand-Side Platform <protocol-definitions-dsp>`
  about :ref:`View Event <protocol-definitions-viewevent>`.
* In response to the :ref:`View Event <protocol-definitions-viewevent>` notification call, :ref:`Demand-Side Platform <protocol-definitions-dsp>`
  returns its :ref:`Context Script <protocol-definitions-contextscript>`, and :ref:`Supply-Side Agent <protocol-definitions-ssa>` 
  makes an attempt to execute this script within its sandbox.

Synchronizing Register Events for Each Creative
-----------------------------------------------

The following diagram presents the details of the workflow aimed at synchronizing :ref:`Register Events <protocol-definitions-registerevent>` 
for each :ref:`Creative <protocol-definitions-creative>`:

.. uml::
    :align: center

    skinparam monochrome true

    participant "Supply-Side\nAgent"                as SSA
    participant "Demand-Side\nContext Provider"     as DSCP

    loop for each Creative
        SSA ->      DSCP    : Post Register Event
        DSCP -->    SSA     : Context Scripts
        SSA ->      SSA     : Execute\nContext Scripts
        SSA ->      DSCP    : Result of\nContext Scripts\n//optional//
    end

The following sequence of events occurs for each :ref:`Creative <protocol-definitions-creative>` to ensure that both
:ref:`Supply-Side Platform <protocol-definitions-ssp>` and :ref:`Demand-Side Platform <protocol-definitions-dsp>` are kept in synch 
regarding :ref:`Register Events <protocol-definitions-registerevent>`:

* Using an endpoint received in the response to the :ref:`View Event <protocol-definitions-viewevent>` notification call, 
  :ref:`Supply-Side Agent <protocol-definitions-ssa>` notifies :ref:`Context Provider <protocol-definitions-cp>` about 
  :ref:`Register Event <protocol-definitions-registerevent>`.
* In response to the :ref:`Register Event <protocol-definitions-registerevent>` notification call, :ref:`Context Provider <protocol-definitions-cp>` 
  returns its :ref:`Context Script <protocol-definitions-contextscript>`, and :ref:`Supply-Side Agent <protocol-definitions-ssa>` 
  makes an attempt to execute this script within its sandbox.
