User Browses Through a Site
===========================

.. uml::
    :align: center

    skinparam monochrome true

    participant "Supply-Side\nContext Platf"    as SSCP
    participant "Supply-Side\nAgent"            as SSA
    participant "Supply-Side\nPlatform"         as SSP
    participant "Demand-Side\nPlatform"         as DSP
    participant "Demand-Side\nAgent"            as DSA
    participant "Demand-Side\nContext Platf"    as DSCP

    SSA -> SSP : Find Creatives
    SSP -> SSCP : Get Context
    SSCP --> SSP : User/Site/Device Context
    SSP --> SSA : Creatives

    loop for each Creative
        SSA -> DSP : Get Creative Content
        DSP --> SSA : Creative Content
        SSA -> SSP : View Event
        SSP -> DSP: View Event\n//redirected//
        DSP --> SSA: Demand-Side endpoint\nfor Register Event
        SSA -> DSP : Register Event
        DSP -> DSCP: Register Event\n//redirected//
        DSCP --> SSA: Context Scripts
        SSA -> SSA: Execute\nContext Scripts
        SSA -> DSCP: Result of\nContext Scripts\n//optional//
    end

The following process takes place when :ref:`User <protocol-definitions-user>` browses through a :ref:`Site <protocol-definitions-site>`:

* :ref:`Supply-Side Agent <protocol-definitions-ssa>` calls :ref:`Supply-Side Platform <protocol-definitions-ssp>` to get a list of :ref:`Creatives <protocol-definitions-creative>` to be displayed in all available :ref:`Placements <protocol-definitions-placement>`.
* :ref:`Supply-Side Platform <protocol-definitions-ssp>` replies to :ref:`Supply-Side Agent <protocol-definitions-ssa>` with a list of metadata for :ref:`Creatives <protocol-definitions-creative>`.

In order to generate the requested list, :ref:`Supply-Side Platform <protocol-definitions-ssp>` first needs to make the following calls:

* :ref:`Supply-Side Platform <protocol-definitions-ssp>` calls :ref:`Ad Select Module <protocol-definitions-asm>` to retrive the list of :ref:`Creatives <protocol-definitions-creative>`
* :ref:`Supply-Side Platform <protocol-definitions-ssp>` calls :ref:`Context Infrastructure <protocol-definitions-contextinfrastructure>` to retrieve :ref:`Context Data <protocol-definitions-contextdata>` regarding the current :ref:`User <protocol-definitions-user>`, :ref:`Site <protocol-definitions-site>` and :ref:`Device <protocol-definitions-device>`.

.. note::
    The list of :ref:`Creatives <protocol-definitions-creative>` is generated by :ref:`Supply-Side Infrastructure <protocol-definitions-ssi>` using information already stored there, 
    without the need to query the corresponding :ref:`Demand-Side Infrastructure <protocol-definitions-dsi>`. This is possible due to the fact that :ref:`Supply-Side Platform <protocol-definitions-ssp>` has already 
    retrieved all the relevant :ref:`Demand-Side Inventories <protocol-definitions-demandinventory>` during the :doc:`Synchronization <../synchronization/index>` stage.

The metadata for each :ref:`Creative <protocol-definitions-creative>` contains a :ref:`Demand-Side Platform <protocol-definitions-dsp>` endpoint 
for retrieving :ref:`Creative Content <protocol-definitions-creativecontent>`.
This implies that each :ref:`Creative <protocol-definitions-creative>` in the list can be associated with its own :ref:`Demand-Side Platform <protocol-definitions-dsp>`. 
As a result, :ref:`Creatives <protocol-definitions-creative>` managed by various :ref:`Demand-Side Platforms <protocol-definitions-dsp>` 
can be displayed next to each other within the same :ref:`Site <protocol-definitions-site>`.

.. note::
    The above process can be repeated periodically in a loop that ensures that :ref:`Creatives <protocol-definitions-creative>` are swapped periodically within the same :ref:`Placement <protocol-definitions-placement>`. 
    Such a loop aims to maximize utilization of :ref:`Placements <protocol-definitions-placement>` by displaying multiple :ref:`Creatives <protocol-definitions-creative>` sequentially within a single :ref:`Placements <protocol-definitions-placement>`.

At this stage, metadata for all :ref:`Creatives <protocol-definitions-creative>` is already retrieved, but none of them is rendered, 
as :ref:`Supply-Side Agent <protocol-definitions-ssa>` has not fetched :ref:`Creative Content <protocol-definitions-creativecontent>` yet. 
The following sequence of events occurs for each :ref:`Creative <protocol-definitions-creative>` to fetch the corresponding :ref:`Creative Content <protocol-definitions-creativecontent>` 
and display it in the designated :ref:`Placement <protocol-definitions-placement>`:

* Using the endpoint contained in the metadata, :ref:`Supply-Side Agent <protocol-definitions-ssa>` calls :ref:`Demand-Side Platform <protocol-definitions-dsp>` to retrieve :ref:`Creative Content <protocol-definitions-creativecontent>`.
* :ref:`Supply-Side Agent <protocol-definitions-ssa>` receives the requested :ref:`Creative Content <protocol-definitions-creativecontent>`.
    
Before a :ref:`Creative <protocol-definitions-creative>` is actually rendered, :ref:`Supply-Side Agent <protocol-definitions-ssa>` 
compares the hash of the received :ref:`Creative Content <protocol-definitions-creativecontent>` with the hash contained in the metadata. 
This is done to ensure that the :ref:`Creative Content <protocol-definitions-creativecontent>` matches what was initially approved when the entire :ref:`Campaign <protocol-definitions-campaign>` was launched.

Assuming the above hashes match, :ref:`Supply-Side Agent <protocol-definitions-ssa>` renders the :ref:`Creative <protocol-definitions-creative>` on the screen, so that the :ref:`User <protocol-definitions-user>` can see it.

The following sequence of events occurs for each :ref:`Creative <protocol-definitions-creative>` to ensure that 
both :ref:`Supply-Side Infrastructure <protocol-definitions-ssi>` and :ref:`Demand-Side Infrastructure <protocol-definitions-dsi>` are kept in synch regarding :ref:`View Events <protocol-definitions-viewevent>`:

* :ref:`Supply-Side Agent <protocol-definitions-ssa>` notifies :ref:`Supply-Side Platform <protocol-definitions-ssp>` about :ref:`View Event <protocol-definitions-viewevent>`.
* :ref:`Supply-Side Platform <protocol-definitions-ssp>` redirects the :ref:`View Event <protocol-definitions-viewevent>` notification call to :ref:`Demand-Side Platform <protocol-definitions-dsp>`.
* In response to the :ref:`View Event <protocol-definitions-viewevent>` notification call, :ref:`Demand-Side Platform <protocol-definitions-dsp>` returns its endpoint for :ref:`Register Event <protocol-definitions-registerevent>` notifications.

The following sequence of events occurs for each :ref:`Creative <protocol-definitions-creative>` to ensure that 
both :ref:`Supply-Side Infrastructure <protocol-definitions-ssi>` and :ref:`Demand-Side Infrastructure <protocol-definitions-dsi>` are kept in synch regarding :ref:`Register Events <protocol-definitions-registerevent>`:

* Using the endpoint received in the previous step, :ref:`Supply-Side Agent <protocol-definitions-ssa>` notifies :ref:`Demand-Side Platform <protocol-definitions-dsp>` about :ref:`Register Event <protocol-definitions-registerevent>`.
* :ref:`Demand-Side Platform <protocol-definitions-dsp>` redirects the :ref:`Register Event <protocol-definitions-registerevent>` notification call to its :ref:`Context Platform <protocol-definitions-cp>`.
* In response to the :ref:`Register Event <protocol-definitions-registerevent>` notification call, :ref:`Context Platform <protocol-definitions-cp>` returns its :ref:`Context Script <protocol-definitions-contextscript>`, and :ref:`Supply-Side Agent <protocol-definitions-ssa>` makes an attempt to execute this script within its sandbox.
